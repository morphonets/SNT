/*-
 * #%L
 * Fiji distribution of ImageJ for the life sciences.
 * %%
 * Copyright (C) 2010 - 2025 Fiji developers.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */
package sc.fiji.snt.analysis.sholl.parsers;

import sc.fiji.snt.analysis.sholl.Profile;
import sc.fiji.snt.analysis.sholl.ProfileProperties;

/**
 * Interface for parsing data sources to extract Sholl analysis profiles.
 * <p>
 * A Parser is responsible for extracting intersection counts at various radial
 * distances from a center point, which forms the basis of Sholl analysis. This
 * interface defines the contract for parsers that can handle different data
 * sources such as neuronal reconstructions (Trees), images, or tabular data.
 * </p>
 * <p>
 * The Parser extends {@link ProfileProperties} to provide metadata about the
 * analysis, including source information, calibration details, and analysis
 * parameters.
 * </p>
 * 
 * @author Tiago Ferreira
 * @see Profile
 * @see ProfileProperties
 * @see sc.fiji.snt.analysis.sholl.parsers.TreeParser
 * @see sc.fiji.snt.analysis.sholl.parsers.ImageParser
 * @see sc.fiji.snt.analysis.sholl.parsers.TabularParser
 */
public interface Parser extends ProfileProperties {

	/**
	 * Checks if the parsing operation was successful.
	 * <p>
	 * This method should be called after {@link #parse()} to determine if the
	 * parsing completed without errors and produced a valid profile.
	 * </p>
	 *
	 * @return true if parsing was successful, false otherwise
	 */
	boolean successful();

	/**
	 * Performs the parsing operation to extract the Sholl profile.
	 * <p>
	 * This method analyzes the data source and computes intersection counts at
	 * various radial distances from the center point. The resulting profile can
	 * be retrieved using {@link #getProfile()}.
	 * </p>
	 * <p>
	 * Implementations should handle any necessary preprocessing, validation, and
	 * error handling during the parsing process.
	 * </p>
	 */
	void parse();

	/**
	 * Terminates the parsing operation.
	 * <p>
	 * This method should be called to clean up resources and stop any ongoing
	 * parsing operations. It may be used to interrupt long-running analyses or
	 * to ensure proper cleanup when the parser is no longer needed.
	 * </p>
	 */
	void terminate();

	/**
	 * Gets the Sholl profile generated by the parsing operation.
	 * <p>
	 * This method returns the profile containing intersection counts at various
	 * radial distances. The profile should only be retrieved after calling
	 * {@link #parse()} and verifying success with {@link #successful()}.
	 * </p>
	 *
	 * @return the Sholl profile, or null if parsing has not been performed or
	 *         was unsuccessful
	 */
	Profile getProfile();

}
